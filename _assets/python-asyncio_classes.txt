@startuml
skinparam backgroundColor transparent
skinparam handwritten true
package asyncio <<Folder>> {
  AbstractEventLoop : run_forever()
  AbstractEventLoop : run_until_complete()
  AbstractEventLoop : is_running()
  AbstractEventLoop : stop()
  AbstractEventLoop : is_closed()
  AbstractEventLoop : close()
  AbstractEventLoop : shutdown_asyncgens()
  AbstractEventLoop : call_soon()
  AbstractEventLoop : call_soon_threadsafe()
  AbstractEventLoop : call_later()
  AbstractEventLoop : call_at()
  AbstractEventLoop : time()
  AbstractEventLoop : create_future()
  AbstractEventLoop : create_task()
  AbstractEventLoop : set_task_factory()
  AbstractEventLoop : get_task_factory()
  AbstractEventLoop : create_connection()
  AbstractEventLoop : create_datagram_endpoint()
  AbstractEventLoop : create_unix_connection()
  AbstractEventLoop : create_server()
  AbstractEventLoop : create_unix_server()
  AbstractEventLoop : connect_accepted_socket()
  AbstractEventLoop : add_reader()
  AbstractEventLoop : remove_reader()
  AbstractEventLoop : add_writer()
  AbstractEventLoop : remove_writer()
  AbstractEventLoop : sock_recv()
  AbstractEventLoop : sock_sendall()
  AbstractEventLoop : sock_connect()
  AbstractEventLoop : sock_accept()
  AbstractEventLoop : getaddrinfo()
  AbstractEventLoop : getnameinfo()
  AbstractEventLoop : connect_read_pipe()
  AbstractEventLoop : connect_write_pipe()
  AbstractEventLoop : add_signal_handler()
  AbstractEventLoop : remove_signal_handler()
  AbstractEventLoop : run_in_executor()
  AbstractEventLoop : set_default_executor()
  AbstractEventLoop : set_exception_handler()
  AbstractEventLoop : get_exception_handler()
  AbstractEventLoop : default_exception_handler()
  AbstractEventLoop : call_exception_handler()
  AbstractEventLoop <|-- BaseEventLoop
  AbstractEventLoop -- Server
  Server : close()
  Server : wait_closed()
  Server : sockets
  AbstractEventLoop -- Handle
  Handle : cancel()
  BaseEventLoop <|-- BaseSelectorEventLoop
  BaseSelectorEventLoop <|-- _UnixSelectorEventLoop
  BaseSelectorEventLoop <|-- _WindowsSelectorEventLoop
  BaseEventLoop <|-- BaseProactorEventLoop
  BaseProactorEventLoop <|-- ProactorEventLoop
  AbstractEventLoopPolicy <|-- BaseDefaultEventLoopPolicy
  AbstractEventLoopPolicy : get_event_loop()
  AbstractEventLoopPolicy : set_event_loop()
  AbstractEventLoopPolicy : new_event_loop()
  Future : cancel()
  Future : cancelled()
  Future : done()
  Future : result()
  Future : exception()
  Future : add_done_callback()
  Future : remove_done_callback()
  Future : set_result()
  Future : set_exception()
  BaseEventLoop -- Future
  Task : {static} all_tasks()
  Task : {static} current_task()
  Task : cancel()
  Task : get_stack()
  Task : print_stack()
  BaseEventLoop -- Task
  BaseTransport : close()
  BaseTransport : is_closing()
  BaseTransport : get_extra_info()
  BaseTransport : set_protocol()
  BaseTransport : get_protocol()
  BaseTransport <|-- ReadTransport
  ReadTransport : pause_reading()
  ReadTransport : resume_reading()
  BaseTransport <|-- WriteTransport
  WriteTransport : abort()
  WriteTransport : can_write_eof()
  WriteTransport : get_write_buffer_size()
  WriteTransport : get_write_buffer_limits()
  WriteTransport : set_write_buffer_limits()
  WriteTransport : write()
  WriteTransport : writelines()
  WriteTransport : write_eof()
  BaseTransport <|-- DatagramTransport
  DatagramTransport : sendto()
  DatagramTransport : abort()
  BaseTransport <|-- BaseSubprocessTransport
  BaseSubprocessTransport : get_pid()
  BaseSubprocessTransport : get_pipe_transport()
  BaseSubprocessTransport : get_returncode()
  BaseSubprocessTransport : kill()
  BaseSubprocessTransport : send_signal()
  BaseSubprocessTransport : terminate()
  BaseSubprocessTransport : close()
  BaseProtocol : connection_made()
  BaseProtocol : connection_lost()
  BaseProtocol : pause_writing()
  BaseProtocol : resume_writing()
  BaseProtocol : connection_lost()
  BaseProtocol <|-- Protocol
  Protocol : data_received()
  Protocol : eof_received()
  BaseProtocol <|-- DatagramProtocol
  DatagramProtocol : datagram_received()
  DatagramProtocol : error_received()
  BaseProtocol <|-- SubprocessProtocol
  SubprocessProtocol : pipe_data_received()
  SubprocessProtocol : pipe_connection_lost()
  SubprocessProtocol : process_exited()
  StreamReader : exception()
  StreamReader : feed_eof()
  StreamReader : feed_data()
  StreamReader : set_exception()
  StreamReader : set_transport()
  StreamReader : read()
  StreamReader : readline()
  StreamReader : readexactly()
  StreamReader : readuntil()
  StreamReader : at_eof()
  StreamWriter : transport
  StreamWriter : can_write_eof()
  StreamWriter : close()
  StreamWriter : drain()
  StreamWriter : get_extra_info()
  StreamWriter : write()
  StreamWriter : writelines()
  StreamWriter : write_eof()
  Protocol <|-- StreamReaderProtocol
  StreamReaderProtocol o-- StreamReader
  StreamReaderProtocol *-- StreamWriter
  Lock : locked()
  Lock : acquire()
  Lock : release()
  Event : clear()
  Event : is_set()
  Event : set()
  Event : wait()
  Condition : acquire()
  Condition : notify()
  Condition : locked()
  Condition : notify_all()
  Condition : release()
  Condition : wait()
  Condition : wait_for()
  Semaphore : acquire()
  Semaphore : locked()
  Semaphore : release()
  Semaphore <|-- BoundedSemaphore
  Queues : empty()
  Queues : full()
  Queues : get()
  Queues : get_nowait()
  Queues : join()
  Queues : put()
  Queues : put_nowait()
  Queues : qsize()
  Queues : task_done()
  Queues : maxsize
  Queues <|-- PriorityQueue
  Queues <|-- LifoQueue
}
@enduml
